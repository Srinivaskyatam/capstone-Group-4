# View rows where 'qty' is 0 for inspection
View(df[df$qty == 0, ])

# Count rows where 'qty' is 0
nrow(df[df$qty == 0, ])

# Count rows where 'qty' is 0 and 'total_sales' is negative
nrow(df %>% filter(qty == 0 & total_sales < 0))

# Count rows where 'total_sales' is negative
nrow(df %>% filter(total_sales < 0))

# View rows where 'total_sales' is negative and 'qty' is not 0 for inspection
View(df %>% filter(total_sales < 0 & qty != 0))

# Create a new DataFrame 'df_assumed' with negative 'total_sales' converted to positive if 'qty' is not 0
# Assumption: The observations with 'qty' is 0 are refunds, the rest negative 'total_sales' values are due to pending payments
df_assumed <- df %>% 
		mutate(total_sales = ifelse(total_sales < 0 & qty != 0, 
							abs(total_sales), 
							total_sales))

# Count rows where 'total_sales' is still negative and 'qty' is not 0 in 'df_assumed' to confirm changes
nrow(df_assumed %>% filter(total_sales < 0 & qty != 0))

# View the updated 'df_assumed' DataFrame
View(df_assumed)

# View rows where 'revenue_category' has multiple category values 
View(df_assumed[df_assumed$revenue_category == "Music Together Mixed Age, Music Together Mixed Age", ])
View(df_assumed[df_assumed$revenue_category == "M30 - Music Lessons, M45 - Music Lessons", ])
View(df_assumed[df_assumed$revenue_category == "M45 - Music Lessons, M30 - Music Lessons", ])
View(df_assumed[df_assumed$revenue_category == "M45 - Music Lessons, M60 - Music Lessons", ])

# Modify 'revenue_category' by changing "Music Together Mixed Age, Music Together Mixed Age" category to "Music Together Mixed Age"
df_assumed <- df_assumed %>%
		mutate(revenue_category = ifelse(revenue_category == "Music Together Mixed Age, Music Together Mixed Age",
							"Music Together Mixed Age", revenue_category))

# Separate multiple revenue categories within each row into new rows
df_assumed <- df_assumed %>% 
     separate_rows(revenue_category, sep = ", ")

# Adjust 'qty' and 'total_sales' for rows with duplicated 'transaction_id' by splitting their values in half
df_assumed <- df_assumed %>% 
     		mutate(qty = ifelse(duplicated(transaction_id) | duplicated(transaction_id, fromLast = TRUE), qty/2, qty), 
		total_sales = ifelse(duplicated(transaction_id) | duplicated(transaction_id, fromLast = TRUE), total_sales/2, total_sales))

# Convert 'revenue_category' to a factor variable for categorical analysis
df_assumed$revenue_category <- as.factor(df_assumed$revenue_category)

# Display the levels of the 'revenue_category' factor variable
levels(df_assumed$revenue_category)

# Group 'df_assumed' by 'revenue_category' and calculate total quantity per category
df_qty_grouped <- df_assumed %>% group_by(revenue_category) %>% dplyr::summarize(total_qty = sum(qty))

# Group 'df_assumed' by 'revenue_category' and calculate total sales per category
df_sales_grouped <- df_assumed %>% group_by(revenue_category) %>% dplyr::summarize(total_sales = sum(total_sales))

# View the grouped quantity data
View(df_qty_grouped)

# View the grouped sales data
View(df_sales_grouped)

# Merge the grouped quantity and sales data into a single DataFrame 'df_grouped'
df_grouped <- merge(df_qty_grouped, df_sales_grouped)

# View the merged DataFrame with both quantity and sales data by 'revenue_category'
View(df_grouped)
